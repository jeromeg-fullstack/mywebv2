import React, { useEffect, useRef, useState } from "react";
import { gsap } from "gsap";
import Head from "next/head";
import { Box } from "@mui/material";
import { useIsScreenSizes } from "@/hooks/useIsScreenSizes";
import initBlastText from "@/assets/js/blast";
import {
	ContentContainer,
	InnerContainer,
	GreetingText,
	DescriptionText,
	NameText,
	ImageContainer,
	SocialMediaContainer
} from "@/layout/home-content";
import { SocialMediaButton } from "@/components/buttons";
import { useThemeCtx } from "@/context/theme";
import BouncingIcon from "@/components/bouncing-icon";
import ThemeDrawer from "@/components/theme-drawer";
import { useUiCtx } from "@/context/ui";
import SvgComponent from "@/components/svg-component";

export default function Home() {
	const [isAnimated, setIsAnimated] = useState(false);
	const svgRef = useRef(null);
	const imageRef = useRef(null);
	const blastRef = useRef(null);

	// Get the isLoading state from the UiCtx
	const {
		state: { isLoading }
	} = useUiCtx();

	const { isMobileXS, isMobileS, isMobileM, isMobileL, isLaptop, isLaptopL, isDesktop } =
		useIsScreenSizes();
	const { isDark } = useThemeCtx();

	const isSmallView = isMobileXS || isMobileS || isMobileM || isMobileL;
	const isBigView = isLaptop || isLaptopL || isDesktop;

	useEffect(() => {
		if (!isLoading) {
			// Initialize GSAP timeline when loading is complete
			const tl = gsap.timeline();

			// 2. Text Blast Animation (after SVG completes)
			tl.add(() => {
				initBlastText();
				$(".text-zone h2").blast({ delimiter: "character" });
				$(".text-zone .blast").each(function (index) {
					$(this)
						.css({ opacity: 0, top: "-500px", position: "relative", visibility: "visible" })
						.delay(300 * index)
						.animate({ top: "0px", opacity: 1 }, 500, () => {
							// After the animation, add the rubberBand effect from Animate.css
							$(this).addClass("animate__animated animate__rubberBand");
						});
				});
			}, "+=0.5"); // Start text animation 0.5s after SVG finishes

			// 1. SVG Outline Animation
			const paths = svgRef.current?.querySelectorAll("path");
			if (paths) {
				paths.forEach((path, index) => {
					const length = path.getTotalLength();
					tl.fromTo(
						path,
						{ strokeDasharray: length, strokeDashoffset: length },
						{
							strokeDashoffset: 0,
							duration: 2 + index * 0.2,
							ease: "power4.inOut",
							onComplete: () => {
								if (index === paths.length - 1) {
									gsap.to(svgRef.current, { opacity: 0, duration: 2 });
								}
							}
						},
						0 // Start all paths together
					);
				});
			}

			// 3. Image Bounce-in Animation (after text blast completes)
			tl.to(
				imageRef.current,
				{
					opacity: 1,
					onComplete: () => setIsAnimated(true)
				},
				"+=1"
			);
		}
	}, [isLoading]); // The effect depends on isLoading

	return (
		<>
			<Head>
				<title>Home | SmartVA</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			{isBigView && <ThemeDrawer />}

			<ContentContainer isSmallView={isSmallView}>
				<InnerContainer isSmallView={isSmallView}>
					<GreetingText isSmallView={isSmallView} variant="h1">
						Hello! I&apos;m
					</GreetingText>
					<div className="text-zone">
						<NameText ref={blastRef} variant="h2" isDark={isDark}>
							Jerome,
						</NameText>
					</div>
					<DescriptionText isSmallView={isSmallView}>Your Smart Virtual Assistant</DescriptionText>
					<SocialMediaContainer isSmallView={isSmallView}>
						{["e92f", "e902", "e934", "e922", "e900", "e930"].map((code, index) => (
							<SocialMediaButton key={index}>
								<BouncingIcon code={code} className="icon" />
							</SocialMediaButton>
						))}
					</SocialMediaContainer>
				</InnerContainer>
			</ContentContainer>

			<ImageContainer isSmallView={isSmallView}>
				<Box
					sx={{
						position: "absolute",
						top: ["60%", "60%", "50%"],
						left: "50%",
						transform: "translate(-50%, -50%)",
						width: ["196px", "246px", "396px", "496px"],
						height: ["196px", "246px", "396px", "496px"],
						objectFit: "contain",
						zIndex: 2
					}}>
					<SvgComponent ref={svgRef} />
				</Box>
				<Box
					ref={imageRef}
					className={`animate__animated  ${isAnimated ? "animate__bounceInDown" : ""}`}
					component="img"
					src="/images/jumbotron/jumbotron@1x.png"
					sx={{
						width: ["200px", "250px", "400px", "500px"],
						height: ["200px", "250px", "400px", "500px"],
						objectFit: "contain",
						zIndex: 2,
						visibility: isAnimated ? "visible" : "hidden"
					}}
				/>
			</ImageContainer>
		</>
	);
}
